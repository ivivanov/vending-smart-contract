{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spaceCola",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "BottleBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "BottleReturned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOperator",
          "type": "address"
        }
      ],
      "name": "OperatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReadyToWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Restocked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BULK_ORDER_DISCOUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FIVE_BOTTLES",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CAPACITY",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_BOTTLE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_BASE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RETURN_BOTTLE_DISCOUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToBottlesBought",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToBottlesReturned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buy5Bottles",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyBottle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prepareWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldOperator",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "restock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnBottle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spaceCola",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0dcdc43cda5d62ec88d77ed2e532f5e2cfb09bdd0647bedb99d5cde438bb50fb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1641244",
    "logsBloom": "0x
    "blockHash": "0x67422ffb4bab362fd8d2ad45bed78b1bca795ec806490083147937149960979e",
    "transactionHash": "0x0dcdc43cda5d62ec88d77ed2e532f5e2cfb09bdd0647bedb99d5cde438bb50fb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x0dcdc43cda5d62ec88d77ed2e532f5e2cfb09bdd0647bedb99d5cde438bb50fb",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d"
        ],
        "data": "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
        "logIndex": 0,
        "blockHash": "0x67422ffb4bab362fd8d2ad45bed78b1bca795ec806490083147937149960979e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x0dcdc43cda5d62ec88d77ed2e532f5e2cfb09bdd0647bedb99d5cde438bb50fb",
        "address": "0xa16E02E87b7454126E5E10d957A927A7F5B5d2be",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005fbdb2315678afecb367f032d93f642f64180aa3"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x67422ffb4bab362fd8d2ad45bed78b1bca795ec806490083147937149960979e"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1641244",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "100000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "c3689edb4e516ef52930144967c2a00e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spaceCola\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"BottleBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"BottleReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReadyToWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Restocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BULK_ORDER_DISCOUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIVE_BOTTLES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CAPACITY\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_BOTTLE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_BASE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_BOTTLE_DISCOUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToBottlesBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToBottlesReturned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy5Bottles\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBottle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"restock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnBottle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spaceCola\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Cola Machine is a contract that implements the {IColaMachine} interface.\",\"kind\":\"dev\",\"methods\":{\"addOperator(address)\":{\"details\":\"Add Operator adds new account to the list of operators. Can only be called by operator.\"},\"buy5Bottles()\":{\"details\":\"See {IColaMachine-buy5Bottles}. Will do {BULK_ORDER_DISCOUNT} discount. Throws if sent ETH does not match exactly the price.\"},\"buyBottle()\":{\"details\":\"See {IColaMachine-buyBottle}. Will do {RETURN_BOTTLE_DISCOUNT} when the buyer has returned bottles. Throws if sent ETH does not match exactly the price with or without discount.\"},\"constructor\":{\"details\":\"Sets the values for space cola address and initial price of the {SpaceCola} token. See {SpaceCola-constructor}.\"},\"getTotalSold()\":{\"details\":\"See {IColaMachine-getTotalSold}. Returns all bottles sold. Access is restricted to operators only.\"},\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"prepareWithdrawal()\":{\"details\":\"See {IColaMachine-prepareWithdrawal}. Refer to {PullPayment} from openZeppelin's contracts. To finalize the withdrawal {withdrawPayments} should be called after the {prepareWithdrawal}. Access is restricted to operators only.\"},\"removeOperator(address)\":{\"details\":\"Remove Operator removes existing operator account from the list of operators. Can only be called by operator.\"},\"restock(uint8)\":{\"details\":\"See {IColaMachine-restock}. Access is restricted to operators only. Throws if the new capacity is greater then the allowed max capacity.\"},\"returnBottle()\":{\"details\":\"See {IColaMachine-returnBottle}. Returned bottle tokens are burned.\"},\"setPrice(uint256)\":{\"details\":\"See {IColaMachine-setPrice}. Access is restricted to operators only. Throws if the current stock is not 0.\"},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"Whose payments will be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ColaMachine.sol\":\"ColaMachine\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/PullPayment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/PullPayment.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private immutable _escrow;\\n\\n    constructor() {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n}\\n\",\"keccak256\":\"0xbb286f865aa7ae537a147695baf219277a823e06f6d2008e9d2aaa6f6686aa95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/escrow/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/escrow/Escrow.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\",\"keccak256\":\"0x10a40dfab727e06bb3472d1bc9ccf145a604b0c9889d5c7a2eff64d72348eb21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/ColaMachine.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/security/PullPayment.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\nimport './IColaMachine.sol';\\nimport './Operated.sol';\\nimport './SpaceCola.sol';\\n\\n/**\\n * @dev Cola Machine is a contract that implements the {IColaMachine} interface.\\n */\\ncontract ColaMachine is Operated, PullPayment, ReentrancyGuard, IColaMachine {\\n  using SafeMath for uint256;\\n\\n  address public immutable spaceCola;\\n\\n  uint8 public constant MAX_CAPACITY = 20; // Max amount of bottles tokens held in the contract\\n  uint8 public constant PERCENT_BASE = 100; // Divisor when calculating the discount %\\n  uint8 public constant RETURN_BOTTLE_DISCOUNT = 50; // 50%\\n  uint8 public constant BULK_ORDER_DISCOUNT = 15; // 15%\\n  uint8 public constant ONE_BOTTLE = 1; // Token equivalent of 1 bottle\\n  uint8 public constant FIVE_BOTTLES = ONE_BOTTLE * 5; // Token equivalent of 5 bottles\\n\\n  mapping(address => uint256) public addressToBottlesBought;\\n  mapping(address => uint256) public addressToBottlesReturned;\\n\\n  uint256 public price; // Bottle price in ETH\\n\\n  uint256 private _totalSold;\\n\\n  /**\\n   * @dev Sets the values for space cola address and initial price of the {SpaceCola} token.\\n   * See {SpaceCola-constructor}.\\n   */\\n  constructor(address _spaceCola, uint256 initialPrice) {\\n    spaceCola = _spaceCola;\\n    price = initialPrice;\\n  }\\n\\n  /**\\n   * @dev Restricts a function so it can only be executed when there is enough stock available.\\n   */\\n  modifier minStock(uint8 amount) {\\n    require(_currentStock() >= amount, 'ColaM: not enough stock');\\n    _;\\n  }\\n\\n  /**\\n   * @dev See {IColaMachine-buyBottle}.\\n   *\\n   * Will do {RETURN_BOTTLE_DISCOUNT} when the buyer has returned bottles. Throws if sent ETH does not match exactly the price with or without discount.\\n   */\\n  function buyBottle() external payable override nonReentrant minStock(1) {\\n    (uint256 actualPrice, bool isDiscounted) = _calc1BottlePrice();\\n    require(msg.value == actualPrice, 'ColaM: eth does not match the price');\\n\\n    if (isDiscounted) {\\n      addressToBottlesReturned[msg.sender]--;\\n    }\\n\\n    SpaceCola(spaceCola).transfer(msg.sender, ONE_BOTTLE);\\n    _incrementTotalSold(ONE_BOTTLE);\\n\\n    emit BottleBought(msg.sender, ONE_BOTTLE);\\n  }\\n\\n  /**\\n   * @dev See {IColaMachine-buy5Bottles}.\\n   *\\n   * Will do {BULK_ORDER_DISCOUNT} discount. Throws if sent ETH does not match exactly the price.\\n   */\\n  function buy5Bottles() external payable override nonReentrant minStock(5) {\\n    require(msg.value == _calc5BottlesPrice(), 'ColaM: eth does not match the price');\\n\\n    SpaceCola(spaceCola).transfer(msg.sender, FIVE_BOTTLES);\\n    _incrementTotalSold(FIVE_BOTTLES);\\n\\n    emit BottleBought(msg.sender, FIVE_BOTTLES);\\n  }\\n\\n  /**\\n   * @dev See {IColaMachine-returnBottle}.\\n   *\\n   * Returned bottle tokens are burned.\\n   */\\n  function returnBottle() external override {\\n    SpaceCola(spaceCola).burnFrom(msg.sender, ONE_BOTTLE);\\n    addressToBottlesReturned[msg.sender]++;\\n\\n    emit BottleReturned(msg.sender);\\n  }\\n\\n  /**\\n   * @dev See {IColaMachine-getTotalSold}.\\n   *\\n   * Returns all bottles sold. Access is restricted to operators only.\\n   */\\n  function getTotalSold() external view override onlyOperator returns (uint256) {\\n    return _totalSold;\\n  }\\n\\n  /**\\n   * @dev See {IColaMachine-restock}.\\n   *\\n   * Access is restricted to operators only. Throws if the new capacity is greater then the allowed max capacity.\\n   */\\n  function restock(uint8 amount) external override onlyOperator nonReentrant {\\n    require(MAX_CAPACITY >= _currentStock() + amount, 'ColaMAdmin:: restock amount above max');\\n\\n    SpaceCola(spaceCola).mint(_myAddress(), amount);\\n\\n    emit Restocked();\\n  }\\n\\n  /**\\n   * @dev See {IColaMachine-setPrice}.\\n   *\\n   * Access is restricted to operators only. Throws if the current stock is not 0.\\n   */\\n  function setPrice(uint256 newPrice) external override onlyOperator nonReentrant {\\n    require(_currentStock() == 0, 'ColaMAdmin:: setting price when stock is not 0');\\n\\n    price = newPrice;\\n\\n    emit PriceChanged(newPrice);\\n  }\\n\\n  /**\\n   * @dev See {IColaMachine-prepareWithdrawal}.\\n   *\\n   * Refer to {PullPayment} from openZeppelin's contracts. To finalize the withdrawal {withdrawPayments} should be called after the {prepareWithdrawal}.\\n   *\\n   * Access is restricted to operators only.\\n   */\\n  function prepareWithdrawal() external override onlyOperator nonReentrant {\\n    _asyncTransfer(msg.sender, _myAddress().balance);\\n\\n    emit ReadyToWithdraw(msg.sender, _myAddress().balance);\\n  }\\n\\n  function _calc5BottlesPrice() private view returns (uint256) {\\n    return price.mul(FIVE_BOTTLES).div(PERCENT_BASE).mul(BULK_ORDER_DISCOUNT);\\n  }\\n\\n  function _calc1BottlePrice() private view returns (uint256 newPrice, bool isDiscounted) {\\n    isDiscounted = addressToBottlesReturned[msg.sender] > 0;\\n    newPrice = isDiscounted ? price.div(PERCENT_BASE).mul(RETURN_BOTTLE_DISCOUNT) : price;\\n\\n    return (newPrice, isDiscounted);\\n  }\\n\\n  function _currentStock() internal view returns (uint256) {\\n    return SpaceCola(spaceCola).balanceOf(_myAddress());\\n  }\\n\\n  function _incrementTotalSold(uint256 amount) internal {\\n    _totalSold += amount;\\n  }\\n\\n  function _myAddress() private view returns (address) {\\n    return address(this);\\n  }\\n}\\n\",\"keccak256\":\"0x1ade3ffbee0141170b1ec2eb81771233f2fe3c1d4e840e2e6d4b969d37a6cf69\",\"license\":\"Unlicense\"},\"contracts/IColaMachine.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of {ColaMachine}.\\n */\\ninterface IColaMachine {\\n  /**\\n   * @dev Emitted when user buys a bottle.\\n   */\\n  event BottleBought(address payee, uint8 amount);\\n\\n  /**\\n   * @dev Emitted when user returns a bottle.\\n   */\\n  event BottleReturned(address payee);\\n\\n  /**\\n   * @dev Emitted when operator mints new bottle tokens.\\n   */\\n  event Restocked();\\n\\n  /**\\n   * @dev Emitted when operator changes price per bottle.\\n   */\\n  event PriceChanged(uint256 newPrice);\\n\\n  /**\\n   * @dev Emitted when operator initiates withdrawal of the {ColaMachine} balance.\\n   */\\n  event ReadyToWithdraw(address dest, uint256 amount);\\n\\n  /**\\n   * @dev Buys 1 bottle for a specific price in ETH. The equivalent amount of tokens are transferred to the sender.\\n   *\\n   * Emits a {BottleBought} event.\\n   */\\n  function buyBottle() external payable;\\n\\n  /**\\n   * @dev Buys 5 bottle for a specific price in ETH. The equivalent amount of tokens are transferred to the sender.\\n   *\\n   * Emits a {BottleBought} event.\\n   */\\n  function buy5Bottles() external payable;\\n\\n  /**\\n   * @dev Return 1 bottle. User should approve the contract to spend 1 bottle token. Increases the user returned bottles balance.\\n   *\\n   * Emits a {BottleReturned} event.\\n   */\\n  function returnBottle() external;\\n\\n  /**\\n   * @dev Returns the total sold bottles.\\n   *\\n   * NOTE: Consider restricting the access.\\n   */\\n  function getTotalSold() external view returns (uint256);\\n\\n  /**\\n   * @dev Mints new bottle tokens on the contract address.\\n   *\\n   * NOTE: Consider restricting the access.\\n   */\\n  function restock(uint8 amount) external;\\n\\n  /**\\n   * @dev Sets new bottle price.\\n   *\\n   * NOTE: Consider restricting the access.\\n   */\\n  function setPrice(uint256 newPrice) external;\\n\\n  /**\\n   * @dev Reserves all the contract ballance for the sender's address.\\n   *\\n   * NOTE: Consider restricting the access.\\n   */\\n  function prepareWithdrawal() external;\\n}\\n\",\"keccak256\":\"0x5db448b34234c0f02223fa90687c96dc69b3491e745de2261b07d438b06a7803\",\"license\":\"Unlicense\"},\"contracts/Operated.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n/**\\n * @title Operated\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is a list of operators that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the first operator account will be the one that deploys the contract. This\\n * can later be changed with {addOperator} or {removeOperator}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOperator`, which can be applied to your functions to restrict their use to\\n * the operators.\\n */\\nabstract contract Operated {\\n  using Counters for Counters.Counter;\\n\\n  Counters.Counter private _operatorsCount;\\n  uint8 private constant _MAX_OPERATORS = 3;\\n  mapping(address => bool) private _addressToOperator;\\n\\n  event OperatorAdded(address newOperator);\\n  event OperatorRemoved(address oldOperator);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the first operator.\\n   */\\n  constructor() {\\n    _addOperator(msg.sender);\\n  }\\n\\n  /**\\n   * @dev Restricts a function so it can only be executed when caller's address has operator role. Throws if called by any account other than operator.\\n   */\\n  modifier onlyOperator() {\\n    require(_addressToOperator[msg.sender], 'Operated: caller is not operator');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Throws if new address is same as the caller.\\n   */\\n  modifier notSelf(address newAddress) {\\n    require(msg.sender != newAddress, 'Operated: new address can not be sender');\\n    _;\\n  }\\n\\n  /**\\n   * @dev Add Operator adds new account to the list of operators.\\n   * Can only be called by operator.\\n   */\\n  function addOperator(address newOperator) external virtual onlyOperator notSelf(newOperator) {\\n    _addOperator(newOperator);\\n  }\\n\\n  /**\\n   * @dev Add Operator adds new account to the list of operators.\\n   * Internal function without access restriction.\\n   */\\n  function _addOperator(address newOperator) internal virtual {\\n    require(_operatorsCount.current() < _MAX_OPERATORS, 'Operated: max operators reached');\\n    require(_addressToOperator[newOperator] == false, 'Operated: address already operator');\\n\\n    _operatorsCount.increment();\\n    _addressToOperator[newOperator] = true;\\n\\n    emit OperatorAdded(newOperator);\\n  }\\n\\n  /**\\n   * @dev Remove Operator removes existing operator account from the list of operators.\\n   * Can only be called by operator.\\n   */\\n  function removeOperator(address oldOperator) external virtual onlyOperator notSelf(oldOperator) {\\n    _removeOperator(oldOperator);\\n  }\\n\\n  /**\\n   * @dev Remove Operator removes existing operator account from the list of operators.\\n   * Internal function without access restriction.\\n   */\\n  function _removeOperator(address oldOperator) internal virtual {\\n    require(_addressToOperator[oldOperator] == true, 'Operated: address not operator');\\n\\n    _operatorsCount.decrement();\\n    _addressToOperator[oldOperator] = false;\\n\\n    emit OperatorRemoved(oldOperator);\\n  }\\n\\n  function getOperatorsCount() external view onlyOperator returns (uint256) {\\n    return _operatorsCount.current();\\n  }\\n}\\n\",\"keccak256\":\"0x8c5e7ab61a77ebfbc659bbaa184a1694fc2066fefc8a4d4cff4c45c01956a2fa\",\"license\":\"Unlicense\"},\"contracts/SpaceCola.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';\\n\\n/**\\n * @dev Space Cola is an ERC20 token which has 0 decimal precision.\\n * One token represents one bottle of Space Cola.\\n */\\ncontract SpaceCola is ERC20, ERC20Burnable, Ownable {\\n  /**\\n   * @dev Sets the values for {name} and {symbol}. See {ERC20-constructor}.\\n   * Transfers the ownership to {owner}.\\n   */\\n  constructor(address owner) ERC20('Space Cola', 'SPC') {\\n    transferOwnership(owner);\\n  }\\n\\n  /**\\n   * @dev Mints new tokens\\n   * Only the owner of the contract can mint new tokens.\\n   */\\n  function mint(address to, uint256 amount) external onlyOwner {\\n    _mint(to, amount);\\n  }\\n\\n  /**\\n   * @dev Zero decimal precision ensures bottles are not divisible.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return 0;\\n  }\\n}\\n\",\"keccak256\":\"0x6b5a7dd8d18baf2f7ce9a4faed64cddf8936034f12a54796444f44ceadecb438\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001d0a38038062001d0a833981016040819052620000349162000207565b6200003f3362000095565b6040516200004d90620001f9565b604051809103906000f0801580156200006a573d6000803e3d6000fd5b506001600160601b0319606091821b8116608052600160025592901b90911660a05260055562000243565b600360ff16620000b16000620001ec60201b62000d871760201c565b10620001045760405162461bcd60e51b815260206004820152601f60248201527f4f706572617465643a206d6178206f70657261746f727320726561636865640060448201526064015b60405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff16156200017a5760405162461bcd60e51b815260206004820152602260248201527f4f706572617465643a206164647265737320616c7265616479206f706572617460448201526137b960f11b6064820152608401620000fb565b620001916000620001f060201b62000d8b1760201c565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d910160405180910390a150565b5490565b80546001019055565b6105f2806200171883390190565b600080604083850312156200021b57600080fd5b82516001600160a01b03811681146200023357600080fd5b6020939093015192949293505050565b60805160601c60a05160601c611478620002a060003960008181610224015281816104a0015281816105eb015281816107c0015281816109650152610da001526000818161070f01528181610cf6015261101901526114786000f3fe6080604052600436106101355760003560e01c806380e64e8b116100ab578063a035b1fe1161006f578063a035b1fe14610312578063a3e04f4814610328578063ab8984711461033d578063ac8a584a1461036a578063e2982c211461038a578063e6bac65c146103aa57600080fd5b806380e64e8b146102885780639137c3661461029057806391b7f5ed146102bd5780639870d7fe146102dd5780639d7b8e68146102fd57600080fd5b80633a5ddf30116100fd5780633a5ddf30146101c55780633f7ca11b146101da57806361e6367d146101ef5780636c390ecf146102125780636d55e1051461025e578063805d835d1461027357600080fd5b80631662f1f61461013a57806316d689741461016657806317a239b2146101885780631fb30f401461019057806331b3eb94146101a5575b600080fd5b34801561014657600080fd5b5061014f600f81565b60405160ff90911681526020015b60405180910390f35b34801561017257600080fd5b5061018661018136600461122b565b6103bf565b005b610186610542565b34801561019c57600080fd5b5061014f600181565b3480156101b157600080fd5b506101866101c03660046111ba565b6106f0565b3480156101d157600080fd5b5061014f601481565b3480156101e657600080fd5b5061014f603281565b3480156101fb57600080fd5b5061020461076e565b60405190815260200161015d565b34801561021e57600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161015d565b34801561026a57600080fd5b506101866107a9565b34801561027f57600080fd5b5061014f606481565b610186610880565b34801561029c57600080fd5b506102046102ab3660046111ba565b60046020526000908152604090205481565b3480156102c957600080fd5b506101866102d83660046111f9565b610a3e565b3480156102e957600080fd5b506101866102f83660046111ba565b610b34565b34801561030957600080fd5b50610204610b9a565b34801561031e57600080fd5b5061020460055481565b34801561033457600080fd5b50610186610bd0565b34801561034957600080fd5b506102046103583660046111ba565b60036020526000908152604090205481565b34801561037657600080fd5b506101866103853660046111ba565b610c72565b34801561039657600080fd5b506102046103a53660046111ba565b610cd4565b3480156103b657600080fd5b5061014f610d78565b3360009081526001602052604090205460ff166103f75760405162461bcd60e51b81526004016103ee9061126a565b60405180910390fd5b6002805414156104195760405162461bcd60e51b81526004016103ee906112e2565b6002805560ff8116610429610d94565b6104339190611360565b601410156104915760405162461bcd60e51b815260206004820152602560248201527f436f6c614d41646d696e3a3a20726573746f636b20616d6f756e742061626f766044820152640ca40dac2f60db1b60648201526084016103ee565b6040516340c10f1960e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906104df903090859060040161124e565b600060405180830381600087803b1580156104f957600080fd5b505af115801561050d573d6000803e3d6000fd5b50506040517fd51b555dab4048d90ddc59d3062869ebf6be58955330cf60e4273a06f49de76c925060009150a1506001600255565b6002805414156105645760405162461bcd60e51b81526004016103ee906112e2565b60028055600580610573610d94565b10156105bb5760405162461bcd60e51b8152602060048201526017602482015276436f6c614d3a206e6f7420656e6f7567682073746f636b60481b60448201526064016103ee565b6105c3610e3d565b34146105e15760405162461bcd60e51b81526004016103ee9061129f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb3361061d600160056113b9565b6040518363ffffffff1660e01b815260040161063a92919061124e565b602060405180830381600087803b15801561065457600080fd5b505af1158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c91906111d7565b506106a461069c600160056113b9565b60ff16610e70565b7f390275ba38ba248c18138118e6e0e08f978d213a3a9ce73edfff78691966ed27336106d2600160056113b9565b6040516106e092919061124e565b60405180910390a1506001600255565b6040516351cff8d960e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906351cff8d990602401600060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b5050505050565b3360009081526001602052604081205460ff1661079d5760405162461bcd60e51b81526004016103ee9061126a565b5060005490565b905090565b60405163079cc67960e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906379cc6790906107f890339060019060040161124e565b600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b5050336000908152600460205260408120805493509150610846836113f9565b90915550506040513381527f1923c34931cfebe211e14ab3dd4557c069c74ec0cb084673144227ee4b5a27c79060200160405180910390a1565b6002805414156108a25760405162461bcd60e51b81526004016103ee906112e2565b600280556001806108b1610d94565b10156108f95760405162461bcd60e51b8152602060048201526017602482015276436f6c614d3a206e6f7420656e6f7567682073746f636b60481b60448201526064016103ee565b600080610904610e8a565b915091508134146109275760405162461bcd60e51b81526004016103ee9061129f565b801561094e57336000908152600460205260408120805491610948836113e2565b91905055505b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061099d90339060019060040161124e565b602060405180830381600087803b1580156109b757600080fd5b505af11580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef91906111d7565b506109fa6001610e70565b7f390275ba38ba248c18138118e6e0e08f978d213a3a9ce73edfff78691966ed27336001604051610a2c92919061124e565b60405180910390a15050600160025550565b3360009081526001602052604090205460ff16610a6d5760405162461bcd60e51b81526004016103ee9061126a565b600280541415610a8f5760405162461bcd60e51b81526004016103ee906112e2565b60028055610a9b610d94565b15610aff5760405162461bcd60e51b815260206004820152602e60248201527f436f6c614d41646d696e3a3a2073657474696e67207072696365207768656e2060448201526d073746f636b206973206e6f7420360941b60648201526084016103ee565b60058190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d622906020016106e0565b3360009081526001602052604090205460ff16610b635760405162461bcd60e51b81526004016103ee9061126a565b80336001600160a01b0382161415610b8d5760405162461bcd60e51b81526004016103ee90611319565b610b9682610ec4565b5050565b3360009081526001602052604081205460ff16610bc95760405162461bcd60e51b81526004016103ee9061126a565b5060065490565b3360009081526001602052604090205460ff16610bff5760405162461bcd60e51b81526004016103ee9061126a565b600280541415610c215760405162461bcd60e51b81526004016103ee906112e2565b60028055610c30333031610ffa565b604080513381523031602082015281517f303270704840e2389e7fc05de22152b1774e6d45de4361a1079aab50fff25839929181900390910190a16001600255565b3360009081526001602052604090205460ff16610ca15760405162461bcd60e51b81526004016103ee9061126a565b80336001600160a01b0382161415610ccb5760405162461bcd60e51b81526004016103ee90611319565b610b968261107b565b6040516371d4ed8d60e11b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e3a9db1a9060240160206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d729190611212565b92915050565b610d84600160056113b9565b81565b5490565b80546001019055565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166370a08231306040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610e0557600080fd5b505afa158015610e19573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190611212565b60006107a4600f610e6a6064610e64610e58600160056113b9565b6005549060ff16611144565b90611157565b90611144565b8060066000828254610e829190611360565b909155505050565b33600090815260046020526040812054151580610ea957600554610ebe565b600554610ebe90603290610e6a906064611157565b91509091565b6003610ecf60005490565b10610f1c5760405162461bcd60e51b815260206004820152601f60248201527f4f706572617465643a206d6178206f70657261746f727320726561636865640060448201526064016103ee565b6001600160a01b03811660009081526001602052604090205460ff1615610f905760405162461bcd60e51b815260206004820152602260248201527f4f706572617465643a206164647265737320616c7265616479206f706572617460448201526137b960f11b60648201526084016103ee565b610f9e600080546001019055565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d91015b60405180910390a150565b60405163f340fa0160e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f340fa019083906024016000604051808303818588803b15801561105e57600080fd5b505af1158015611072573d6000803e3d6000fd5b50505050505050565b6001600160a01b03811660009081526001602081905260409091205460ff161515146110e95760405162461bcd60e51b815260206004820152601e60248201527f4f706572617465643a2061646472657373206e6f74206f70657261746f72000060448201526064016103ee565b6110f36000611163565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d9101610fef565b6000611150828461139a565b9392505050565b60006111508284611378565b8054806111b25760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016103ee565b600019019055565b6000602082840312156111cc57600080fd5b81356111508161142a565b6000602082840312156111e957600080fd5b8151801515811461115057600080fd5b60006020828403121561120b57600080fd5b5035919050565b60006020828403121561122457600080fd5b5051919050565b60006020828403121561123d57600080fd5b813560ff8116811461115057600080fd5b6001600160a01b0392909216825260ff16602082015260400190565b6020808252818101527f4f706572617465643a2063616c6c6572206973206e6f74206f70657261746f72604082015260600190565b60208082526023908201527f436f6c614d3a2065746820646f6573206e6f74206d617463682074686520707260408201526269636560e81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526027908201527f4f706572617465643a206e657720616464726573732063616e206e6f742062656040820152661039b2b73232b960c91b606082015260800190565b6000821982111561137357611373611414565b500190565b60008261139557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156113b4576113b4611414565b500290565b600060ff821660ff84168160ff04811182151516156113da576113da611414565b029392505050565b6000816113f1576113f1611414565b506000190190565b600060001982141561140d5761140d611414565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461143f57600080fd5b5056fea264697066735822122097bd988e5e5df5173d6c44bb431c364975f7c2a0e839a3836c289fbf85b13db964736f6c63430008070033608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105748061007e6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461007c5780638da5cb5b14610091578063e3a9db1a146100be578063f2fde38b14610102578063f340fa0114610122575b600080fd5b34801561006657600080fd5b5061007a6100753660046104aa565b610135565b005b34801561008857600080fd5b5061007a6101d7565b34801561009d57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b3480156100ca57600080fd5b506100f46100d93660046104aa565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100b5565b34801561010e57600080fd5b5061007a61011d3660046104aa565b61020d565b61007a6101303660046104aa565b6102a8565b6000546001600160a01b031633146101685760405162461bcd60e51b815260040161015f906104ce565b60405180910390fd5b6001600160a01b0381166000818152600160205260408120805491905590610190908261033c565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101cb91815260200190565b60405180910390a25050565b6000546001600160a01b031633146102015760405162461bcd60e51b815260040161015f906104ce565b61020b600061045a565b565b6000546001600160a01b031633146102375760405162461bcd60e51b815260040161015f906104ce565b6001600160a01b03811661029c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161015f565b6102a58161045a565b50565b6000546001600160a01b031633146102d25760405162461bcd60e51b815260040161015f906104ce565b6001600160a01b0381166000908152600160205260408120805434928392916102fc908490610503565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101cb565b8047101561038c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161015f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146103d9576040519150601f19603f3d011682016040523d82523d6000602084013e6103de565b606091505b50509050806104555760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161015f565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104bc57600080fd5b81356104c781610529565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561052457634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146102a557600080fdfea26469706673582212204af8f7b4802712d75dba86f3c65d8d067253041994aa988c862395a93097202d64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c806380e64e8b116100ab578063a035b1fe1161006f578063a035b1fe14610312578063a3e04f4814610328578063ab8984711461033d578063ac8a584a1461036a578063e2982c211461038a578063e6bac65c146103aa57600080fd5b806380e64e8b146102885780639137c3661461029057806391b7f5ed146102bd5780639870d7fe146102dd5780639d7b8e68146102fd57600080fd5b80633a5ddf30116100fd5780633a5ddf30146101c55780633f7ca11b146101da57806361e6367d146101ef5780636c390ecf146102125780636d55e1051461025e578063805d835d1461027357600080fd5b80631662f1f61461013a57806316d689741461016657806317a239b2146101885780631fb30f401461019057806331b3eb94146101a5575b600080fd5b34801561014657600080fd5b5061014f600f81565b60405160ff90911681526020015b60405180910390f35b34801561017257600080fd5b5061018661018136600461122b565b6103bf565b005b610186610542565b34801561019c57600080fd5b5061014f600181565b3480156101b157600080fd5b506101866101c03660046111ba565b6106f0565b3480156101d157600080fd5b5061014f601481565b3480156101e657600080fd5b5061014f603281565b3480156101fb57600080fd5b5061020461076e565b60405190815260200161015d565b34801561021e57600080fd5b506102467f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161015d565b34801561026a57600080fd5b506101866107a9565b34801561027f57600080fd5b5061014f606481565b610186610880565b34801561029c57600080fd5b506102046102ab3660046111ba565b60046020526000908152604090205481565b3480156102c957600080fd5b506101866102d83660046111f9565b610a3e565b3480156102e957600080fd5b506101866102f83660046111ba565b610b34565b34801561030957600080fd5b50610204610b9a565b34801561031e57600080fd5b5061020460055481565b34801561033457600080fd5b50610186610bd0565b34801561034957600080fd5b506102046103583660046111ba565b60036020526000908152604090205481565b34801561037657600080fd5b506101866103853660046111ba565b610c72565b34801561039657600080fd5b506102046103a53660046111ba565b610cd4565b3480156103b657600080fd5b5061014f610d78565b3360009081526001602052604090205460ff166103f75760405162461bcd60e51b81526004016103ee9061126a565b60405180910390fd5b6002805414156104195760405162461bcd60e51b81526004016103ee906112e2565b6002805560ff8116610429610d94565b6104339190611360565b601410156104915760405162461bcd60e51b815260206004820152602560248201527f436f6c614d41646d696e3a3a20726573746f636b20616d6f756e742061626f766044820152640ca40dac2f60db1b60648201526084016103ee565b6040516340c10f1960e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906104df903090859060040161124e565b600060405180830381600087803b1580156104f957600080fd5b505af115801561050d573d6000803e3d6000fd5b50506040517fd51b555dab4048d90ddc59d3062869ebf6be58955330cf60e4273a06f49de76c925060009150a1506001600255565b6002805414156105645760405162461bcd60e51b81526004016103ee906112e2565b60028055600580610573610d94565b10156105bb5760405162461bcd60e51b8152602060048201526017602482015276436f6c614d3a206e6f7420656e6f7567682073746f636b60481b60448201526064016103ee565b6105c3610e3d565b34146105e15760405162461bcd60e51b81526004016103ee9061129f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb3361061d600160056113b9565b6040518363ffffffff1660e01b815260040161063a92919061124e565b602060405180830381600087803b15801561065457600080fd5b505af1158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c91906111d7565b506106a461069c600160056113b9565b60ff16610e70565b7f390275ba38ba248c18138118e6e0e08f978d213a3a9ce73edfff78691966ed27336106d2600160056113b9565b6040516106e092919061124e565b60405180910390a1506001600255565b6040516351cff8d960e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906351cff8d990602401600060405180830381600087803b15801561075357600080fd5b505af1158015610767573d6000803e3d6000fd5b5050505050565b3360009081526001602052604081205460ff1661079d5760405162461bcd60e51b81526004016103ee9061126a565b5060005490565b905090565b60405163079cc67960e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906379cc6790906107f890339060019060040161124e565b600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b5050336000908152600460205260408120805493509150610846836113f9565b90915550506040513381527f1923c34931cfebe211e14ab3dd4557c069c74ec0cb084673144227ee4b5a27c79060200160405180910390a1565b6002805414156108a25760405162461bcd60e51b81526004016103ee906112e2565b600280556001806108b1610d94565b10156108f95760405162461bcd60e51b8152602060048201526017602482015276436f6c614d3a206e6f7420656e6f7567682073746f636b60481b60448201526064016103ee565b600080610904610e8a565b915091508134146109275760405162461bcd60e51b81526004016103ee9061129f565b801561094e57336000908152600460205260408120805491610948836113e2565b91905055505b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061099d90339060019060040161124e565b602060405180830381600087803b1580156109b757600080fd5b505af11580156109cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ef91906111d7565b506109fa6001610e70565b7f390275ba38ba248c18138118e6e0e08f978d213a3a9ce73edfff78691966ed27336001604051610a2c92919061124e565b60405180910390a15050600160025550565b3360009081526001602052604090205460ff16610a6d5760405162461bcd60e51b81526004016103ee9061126a565b600280541415610a8f5760405162461bcd60e51b81526004016103ee906112e2565b60028055610a9b610d94565b15610aff5760405162461bcd60e51b815260206004820152602e60248201527f436f6c614d41646d696e3a3a2073657474696e67207072696365207768656e2060448201526d073746f636b206973206e6f7420360941b60648201526084016103ee565b60058190556040518181527fa6dc15bdb68da224c66db4b3838d9a2b205138e8cff6774e57d0af91e196d622906020016106e0565b3360009081526001602052604090205460ff16610b635760405162461bcd60e51b81526004016103ee9061126a565b80336001600160a01b0382161415610b8d5760405162461bcd60e51b81526004016103ee90611319565b610b9682610ec4565b5050565b3360009081526001602052604081205460ff16610bc95760405162461bcd60e51b81526004016103ee9061126a565b5060065490565b3360009081526001602052604090205460ff16610bff5760405162461bcd60e51b81526004016103ee9061126a565b600280541415610c215760405162461bcd60e51b81526004016103ee906112e2565b60028055610c30333031610ffa565b604080513381523031602082015281517f303270704840e2389e7fc05de22152b1774e6d45de4361a1079aab50fff25839929181900390910190a16001600255565b3360009081526001602052604090205460ff16610ca15760405162461bcd60e51b81526004016103ee9061126a565b80336001600160a01b0382161415610ccb5760405162461bcd60e51b81526004016103ee90611319565b610b968261107b565b6040516371d4ed8d60e11b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e3a9db1a9060240160206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d729190611212565b92915050565b610d84600160056113b9565b81565b5490565b80546001019055565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166370a08231306040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b158015610e0557600080fd5b505afa158015610e19573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190611212565b60006107a4600f610e6a6064610e64610e58600160056113b9565b6005549060ff16611144565b90611157565b90611144565b8060066000828254610e829190611360565b909155505050565b33600090815260046020526040812054151580610ea957600554610ebe565b600554610ebe90603290610e6a906064611157565b91509091565b6003610ecf60005490565b10610f1c5760405162461bcd60e51b815260206004820152601f60248201527f4f706572617465643a206d6178206f70657261746f727320726561636865640060448201526064016103ee565b6001600160a01b03811660009081526001602052604090205460ff1615610f905760405162461bcd60e51b815260206004820152602260248201527f4f706572617465643a206164647265737320616c7265616479206f706572617460448201526137b960f11b60648201526084016103ee565b610f9e600080546001019055565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527fac6fa858e9350a46cec16539926e0fde25b7629f84b5a72bffaae4df888ae86d91015b60405180910390a150565b60405163f340fa0160e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f340fa019083906024016000604051808303818588803b15801561105e57600080fd5b505af1158015611072573d6000803e3d6000fd5b50505050505050565b6001600160a01b03811660009081526001602081905260409091205460ff161515146110e95760405162461bcd60e51b815260206004820152601e60248201527f4f706572617465643a2061646472657373206e6f74206f70657261746f72000060448201526064016103ee565b6110f36000611163565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527f80c0b871b97b595b16a7741c1b06fed0c6f6f558639f18ccbce50724325dc40d9101610fef565b6000611150828461139a565b9392505050565b60006111508284611378565b8054806111b25760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016103ee565b600019019055565b6000602082840312156111cc57600080fd5b81356111508161142a565b6000602082840312156111e957600080fd5b8151801515811461115057600080fd5b60006020828403121561120b57600080fd5b5035919050565b60006020828403121561122457600080fd5b5051919050565b60006020828403121561123d57600080fd5b813560ff8116811461115057600080fd5b6001600160a01b0392909216825260ff16602082015260400190565b6020808252818101527f4f706572617465643a2063616c6c6572206973206e6f74206f70657261746f72604082015260600190565b60208082526023908201527f436f6c614d3a2065746820646f6573206e6f74206d617463682074686520707260408201526269636560e81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526027908201527f4f706572617465643a206e657720616464726573732063616e206e6f742062656040820152661039b2b73232b960c91b606082015260800190565b6000821982111561137357611373611414565b500190565b60008261139557634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156113b4576113b4611414565b500290565b600060ff821660ff84168160ff04811182151516156113da576113da611414565b029392505050565b6000816113f1576113f1611414565b506000190190565b600060001982141561140d5761140d611414565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461143f57600080fd5b5056fea264697066735822122097bd988e5e5df5173d6c44bb431c364975f7c2a0e839a3836c289fbf85b13db964736f6c63430008070033",
  "devdoc": {
    "details": "Cola Machine is a contract that implements the {IColaMachine} interface.",
    "kind": "dev",
    "methods": {
      "addOperator(address)": {
        "details": "Add Operator adds new account to the list of operators. Can only be called by operator."
      },
      "buy5Bottles()": {
        "details": "See {IColaMachine-buy5Bottles}. Will do {BULK_ORDER_DISCOUNT} discount. Throws if sent ETH does not match exactly the price."
      },
      "buyBottle()": {
        "details": "See {IColaMachine-buyBottle}. Will do {RETURN_BOTTLE_DISCOUNT} when the buyer has returned bottles. Throws if sent ETH does not match exactly the price with or without discount."
      },
      "constructor": {
        "details": "Sets the values for space cola address and initial price of the {SpaceCola} token. See {SpaceCola-constructor}."
      },
      "getTotalSold()": {
        "details": "See {IColaMachine-getTotalSold}. Returns all bottles sold. Access is restricted to operators only."
      },
      "payments(address)": {
        "details": "Returns the payments owed to an address.",
        "params": {
          "dest": "The creditor's address."
        }
      },
      "prepareWithdrawal()": {
        "details": "See {IColaMachine-prepareWithdrawal}. Refer to {PullPayment} from openZeppelin's contracts. To finalize the withdrawal {withdrawPayments} should be called after the {prepareWithdrawal}. Access is restricted to operators only."
      },
      "removeOperator(address)": {
        "details": "Remove Operator removes existing operator account from the list of operators. Can only be called by operator."
      },
      "restock(uint8)": {
        "details": "See {IColaMachine-restock}. Access is restricted to operators only. Throws if the new capacity is greater then the allowed max capacity."
      },
      "returnBottle()": {
        "details": "See {IColaMachine-returnBottle}. Returned bottle tokens are burned."
      },
      "setPrice(uint256)": {
        "details": "See {IColaMachine-setPrice}. Access is restricted to operators only. Throws if the current stock is not 0."
      },
      "withdrawPayments(address)": {
        "details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
        "params": {
          "payee": "Whose payments will be withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2207,
        "contract": "contracts/ColaMachine.sol:ColaMachine",
        "label": "_operatorsCount",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)1263_storage"
      },
      {
        "astId": 2214,
        "contract": "contracts/ColaMachine.sol:ColaMachine",
        "label": "_addressToOperator",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 178,
        "contract": "contracts/ColaMachine.sol:ColaMachine",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1785,
        "contract": "contracts/ColaMachine.sol:ColaMachine",
        "label": "addressToBottlesBought",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1789,
        "contract": "contracts/ColaMachine.sol:ColaMachine",
        "label": "addressToBottlesReturned",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1791,
        "contract": "contracts/ColaMachine.sol:ColaMachine",
        "label": "price",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1793,
        "contract": "contracts/ColaMachine.sol:ColaMachine",
        "label": "_totalSold",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)1263_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1262,
            "contract": "contracts/ColaMachine.sol:ColaMachine",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}